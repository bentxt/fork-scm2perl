#!/usr/bin/perl

#require 5.005;

# Copyright Marc Lehmann <pcg@goof.com>
#
# This is part of the Gimp-Perl extension, and shares its copright with it.

# this file is called "the dong"

# TODO
# more syntax ;) more functions ;) more exprns ;) more constants ;)
# ui/args
# too many parens
# comments(!)

# This is distributed under the GPL (see COPYING.GNU for details).

=cut

=head1 NAME

scm2perl - convert script-fu to perl

=head1 SYNOPSIS

 scm2perl filename.scm...

=head1 DESCRIPTION

This program tries to convert Script-Fu (Scheme) scripts written for The
Gimp into a Perl script.

Don't expect too much from this version. To run it, you need
the Parse::RecDescent module from CPAN.

=head1 CONVERSION TIPS

=head2 PDB functions returning arrays

Perl knows the length of arrays, Script-Fu doesn't. Functions returning
single arrays return them as a normal perl array, Functions returning
more then one array return it as an array-ref. Script-Fu (and the
converted script) expect to get a length argument and then the
arguments. Each occurrence (common ones are C<gimp_list_images> or
C<gimp_image_get_layers>) must be fixed by hand.

=head1 AUTHOR

Marc Lehmann <pcg@goof.com>

=head1 SEE ALSO

gimp(1), L<Gimp>.

=cut

$|=1;

use Parse::RecDescent;

use ScmToPerl::Grammar;

$RD_HINT=1;
#$RD_TRACE=1;

unless(@ARGV) {
   print STDERR "Script-Fu to Perl Translator 1.0\n";
   print STDERR "Usage: $0 file.scm ...\n";
   exit(1);
}

my $quiet = 1;
print STDERR "creating parser..." unless $quiet;

#open GRAMMAR_FILE, "scmgrammar" or die;
#local $/;

#my $grammar = <GRAMMAR_FILE>;

my $parser = ScmToPerl::Grammar->new();

#$parser = Parse::RecDescent->new($grammar);

$parser or die;
print STDERR "done\n" unless $quiet;

#$RD_TRACE=15;

sub convert {
   my($in,$out)=@_;

   open IN,"<$in\0"   or die "unable to open '$in' for reading: $!";
   open OUT,">$out\0" or die "unable to open '$out' for writing: $!";

   print STDERR "header..." unless $quiet;
   print OUT <<EOA;
#!/usr/bin/perl

EOA

   print STDERR "reading($in)..." unless $quiet;
   { local $/; $file = <IN> }
   $file =~ s/;.*?$//gm;
   $::filesize = length $file; # make it clear this is a _global_ variable

   print STDERR "translating..." unless $quiet;
   $parser->script ($file);

   print STDERR "trailer..." unless $quiet;
   print OUT "\n",join("\n\n",keys %add_funcs),"\n" if %add_funcs;
   print OUT <<'EOA';

exit main;
EOA

   print STDERR "wrote($out)\n" unless $quiet;
}

for $x (@ARGV) {
   (my $y=$x)=~s/\.scm/.pl/i or die "source file '$x' has no .scm extension";
   convert($x,$y);
}

